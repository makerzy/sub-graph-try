// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NFT extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFT entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFT entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFT", id.toString(), this);
  }

  static load(id: string): NFT | null {
    return store.get("NFT", id) as NFT | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenURI(): string {
    let value = this.get("tokenURI");
    return value.toString();
  }

  set tokenURI(value: string) {
    this.set("tokenURI", Value.fromString(value));
  }

  get royalty(): string | null {
    let value = this.get("royalty");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set royalty(value: string | null) {
    if (value === null) {
      this.unset("royalty");
    } else {
      this.set("royalty", Value.fromString(value as string));
    }
  }

  get orders(): Array<string> {
    let value = this.get("orders");
    return value.toStringArray();
  }

  set orders(value: Array<string>) {
    this.set("orders", Value.fromStringArray(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }

  get activeOrder(): string | null {
    let value = this.get("activeOrder");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set activeOrder(value: string | null) {
    if (value === null) {
      this.unset("activeOrder");
    } else {
      this.set("activeOrder", Value.fromString(value as string));
    }
  }

  get history(): Array<string> {
    let value = this.get("history");
    return value.toStringArray();
  }

  set history(value: Array<string>) {
    this.set("history", Value.fromStringArray(value));
  }
}

export class PaymentMethod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PaymentMethod entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PaymentMethod entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PaymentMethod", id.toString(), this);
  }

  static load(id: string): PaymentMethod | null {
    return store.get("PaymentMethod", id) as PaymentMethod | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get isPlatformToken(): boolean {
    let value = this.get("isPlatformToken");
    return value.toBoolean();
  }

  set isPlatformToken(value: boolean) {
    this.set("isPlatformToken", Value.fromBoolean(value));
  }
}

export class Auction extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Auction entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Auction entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Auction", id.toString(), this);
  }

  static load(id: string): Auction | null {
    return store.get("Auction", id) as Auction | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (value === null) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(value as string));
    }
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get txHash(): Bytes {
    let value = this.get("txHash");
    return value.toBytes();
  }

  set txHash(value: Bytes) {
    this.set("txHash", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }

  get buyer(): string | null {
    let value = this.get("buyer");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set buyer(value: string | null) {
    if (value === null) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromString(value as string));
    }
  }

  get basePrice(): BigInt {
    let value = this.get("basePrice");
    return value.toBigInt();
  }

  set basePrice(value: BigInt) {
    this.set("basePrice", Value.fromBigInt(value));
  }

  get royaltyFees(): BigInt {
    let value = this.get("royaltyFees");
    return value.toBigInt();
  }

  set royaltyFees(value: BigInt) {
    this.set("royaltyFees", Value.fromBigInt(value));
  }

  get paymentMethod(): string | null {
    let value = this.get("paymentMethod");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set paymentMethod(value: string | null) {
    if (value === null) {
      this.unset("paymentMethod");
    } else {
      this.set("paymentMethod", Value.fromString(value as string));
    }
  }

  get soldPrice(): BigInt | null {
    let value = this.get("soldPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("soldPrice");
    } else {
      this.set("soldPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    return value.toBigInt();
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get closedAt(): BigInt | null {
    let value = this.get("closedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closedAt");
    } else {
      this.set("closedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Bid extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bid entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bid entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bid", id.toString(), this);
  }

  static load(id: string): Bid | null {
    return store.get("Bid", id) as Bid | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get category(): string {
    let value = this.get("category");
    return value.toString();
  }

  set category(value: string) {
    this.set("category", Value.fromString(value));
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (value === null) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(value as string));
    }
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    return value.toBytes();
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get bidder(): string | null {
    let value = this.get("bidder");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bidder(value: string | null) {
    if (value === null) {
      this.unset("bidder");
    } else {
      this.set("bidder", Value.fromString(value as string));
    }
  }

  get seller(): string | null {
    let value = this.get("seller");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set seller(value: string | null) {
    if (value === null) {
      this.unset("seller");
    } else {
      this.set("seller", Value.fromString(value as string));
    }
  }

  get bidValue(): BigInt {
    let value = this.get("bidValue");
    return value.toBigInt();
  }

  set bidValue(value: BigInt) {
    this.set("bidValue", Value.fromBigInt(value));
  }

  get status(): string {
    let value = this.get("status");
    return value.toString();
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get closedAt(): BigInt | null {
    let value = this.get("closedAt");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set closedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("closedAt");
    } else {
      this.set("closedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class NFTTokenHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NFTTokenHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NFTTokenHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NFTTokenHistory", id.toString(), this);
  }

  static load(id: string): NFTTokenHistory | null {
    return store.get("NFTTokenHistory", id) as NFTTokenHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get currentOwner(): string {
    let value = this.get("currentOwner");
    return value.toString();
  }

  set currentOwner(value: string) {
    this.set("currentOwner", Value.fromString(value));
  }

  get previousOwner(): string {
    let value = this.get("previousOwner");
    return value.toString();
  }

  set previousOwner(value: string) {
    this.set("previousOwner", Value.fromString(value));
  }

  get lastHistoricalPrice(): BigInt | null {
    let value = this.get("lastHistoricalPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastHistoricalPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("lastHistoricalPrice");
    } else {
      this.set("lastHistoricalPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get currentPrice(): BigInt | null {
    let value = this.get("currentPrice");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set currentPrice(value: BigInt | null) {
    if (value === null) {
      this.unset("currentPrice");
    } else {
      this.set("currentPrice", Value.fromBigInt(value as BigInt));
    }
  }

  get paymentMethod(): string {
    let value = this.get("paymentMethod");
    return value.toString();
  }

  set paymentMethod(value: string) {
    this.set("paymentMethod", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get nfts(): Array<string> | null {
    let value = this.get("nfts");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nfts(value: Array<string> | null) {
    if (value === null) {
      this.unset("nfts");
    } else {
      this.set("nfts", Value.fromStringArray(value as Array<string>));
    }
  }

  get activeSellOrders(): Array<string> {
    let value = this.get("activeSellOrders");
    return value.toStringArray();
  }

  set activeSellOrders(value: Array<string>) {
    this.set("activeSellOrders", Value.fromStringArray(value));
  }

  get bids(): Array<string> {
    let value = this.get("bids");
    return value.toStringArray();
  }

  set bids(value: Array<string>) {
    this.set("bids", Value.fromStringArray(value));
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Payment entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Payment entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Payment", id.toString(), this);
  }

  static load(id: string): Payment | null {
    return store.get("Payment", id) as Payment | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get paymentMethod(): string {
    let value = this.get("paymentMethod");
    return value.toString();
  }

  set paymentMethod(value: string) {
    this.set("paymentMethod", Value.fromString(value));
  }

  get totalValue(): BigInt {
    let value = this.get("totalValue");
    return value.toBigInt();
  }

  set totalValue(value: BigInt) {
    this.set("totalValue", Value.fromBigInt(value));
  }

  get platformCut(): BigInt {
    let value = this.get("platformCut");
    return value.toBigInt();
  }

  set platformCut(value: BigInt) {
    this.set("platformCut", Value.fromBigInt(value));
  }

  get ownerPayment(): BigInt {
    let value = this.get("ownerPayment");
    return value.toBigInt();
  }

  set ownerPayment(value: BigInt) {
    this.set("ownerPayment", Value.fromBigInt(value));
  }

  get ownerCashBack(): BigInt {
    let value = this.get("ownerCashBack");
    return value.toBigInt();
  }

  set ownerCashBack(value: BigInt) {
    this.set("ownerCashBack", Value.fromBigInt(value));
  }

  get royaltyCut(): BigInt {
    let value = this.get("royaltyCut");
    return value.toBigInt();
  }

  set royaltyCut(value: BigInt) {
    this.set("royaltyCut", Value.fromBigInt(value));
  }

  get refBonus(): BigInt {
    let value = this.get("refBonus");
    return value.toBigInt();
  }

  set refBonus(value: BigInt) {
    this.set("refBonus", Value.fromBigInt(value));
  }

  get cashBack(): BigInt {
    let value = this.get("cashBack");
    return value.toBigInt();
  }

  set cashBack(value: BigInt) {
    this.set("cashBack", Value.fromBigInt(value));
  }

  get totalCashBack(): BigInt {
    let value = this.get("totalCashBack");
    return value.toBigInt();
  }

  set totalCashBack(value: BigInt) {
    this.set("totalCashBack", Value.fromBigInt(value));
  }
}
