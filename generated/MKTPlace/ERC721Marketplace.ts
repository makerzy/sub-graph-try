// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionCreated extends ethereum.Event {
  get params(): AuctionCreated__Params {
    return new AuctionCreated__Params(this);
  }
}

export class AuctionCreated__Params {
  _event: AuctionCreated;

  constructor(event: AuctionCreated) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get _basePrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get secondaryFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get paymentMethod(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get royalty(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get royaltyFees(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class BidMade extends ethereum.Event {
  get params(): BidMade__Params {
    return new BidMade__Params(this);
  }
}

export class BidMade__Params {
  _event: BidMade;

  constructor(event: BidMade) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get bidValue(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Cancelled extends ethereum.Event {
  get params(): Cancelled__Params {
    return new Cancelled__Params(this);
  }
}

export class Cancelled__Params {
  _event: Cancelled;

  constructor(event: Cancelled) {
    this._event = event;
  }

  get id(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Executed extends ethereum.Event {
  get params(): Executed__Params {
    return new Executed__Params(this);
  }
}

export class Executed__Params {
  _event: Executed;

  constructor(event: Executed) {
    this._event = event;
  }

  get auctionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get creatorPayment(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get ownerPayment(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get total(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class FeesUpdated extends ethereum.Event {
  get params(): FeesUpdated__Params {
    return new FeesUpdated__Params(this);
  }
}

export class FeesUpdated__Params {
  _event: FeesUpdated;

  constructor(event: FeesUpdated) {
    this._event = event;
  }

  get auctionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oldFees(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PriceUpdated extends ethereum.Event {
  get params(): PriceUpdated__Params {
    return new PriceUpdated__Params(this);
  }
}

export class PriceUpdated__Params {
  _event: PriceUpdated;

  constructor(event: PriceUpdated) {
    this._event = event;
  }

  get auctionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get oldPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get newPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class UpdatePaymentMethod extends ethereum.Event {
  get params(): UpdatePaymentMethod__Params {
    return new UpdatePaymentMethod__Params(this);
  }
}

export class UpdatePaymentMethod__Params {
  _event: UpdatePaymentMethod;

  constructor(event: UpdatePaymentMethod) {
    this._event = event;
  }

  get auctionId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldPaymentMtd(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newPaymentMtd(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ERC721Marketplace__getAuctionResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: Address;
  value8: BigInt;
  value9: BigInt;
  value10: Bytes;
  value11: i32;
  value12: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: Address,
    value8: BigInt,
    value9: BigInt,
    value10: Bytes,
    value11: i32,
    value12: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
    this.value12 = value12;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromAddress(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    map.set("value10", ethereum.Value.fromFixedBytes(this.value10));
    map.set(
      "value11",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value11))
    );
    map.set("value12", ethereum.Value.fromUnsignedBigInt(this.value12));
    return map;
  }
}

export class ERC721Marketplace__getUserCollectionsResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get token(): Address {
    return this[1].toAddress();
  }

  get currentBidder(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get royalty(): Address {
    return this[4].toAddress();
  }

  get basePrice(): BigInt {
    return this[5].toBigInt();
  }

  get lastBidVal(): BigInt {
    return this[6].toBigInt();
  }

  get paymentMethod(): Address {
    return this[7].toAddress();
  }

  get createdAt(): BigInt {
    return this[8].toBigInt();
  }

  get royaltyFees(): BigInt {
    return this[9].toBigInt();
  }

  get id(): Bytes {
    return this[10].toBytes();
  }

  get status(): i32 {
    return this[11].toI32();
  }

  get closedAt(): BigInt {
    return this[12].toBigInt();
  }
}

export class ERC721Marketplace__getPlatformCutResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class ERC721Marketplace extends ethereum.SmartContract {
  static bind(address: Address): ERC721Marketplace {
    return new ERC721Marketplace("ERC721Marketplace", address);
  }

  bidExtension(): BigInt {
    let result = super.call("bidExtension", "bidExtension():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidExtension(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidExtension", "bidExtension():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bidWindow(): BigInt {
    let result = super.call("bidWindow", "bidWindow():(uint256)", []);

    return result[0].toBigInt();
  }

  try_bidWindow(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bidWindow", "bidWindow():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cashBack(): BigInt {
    let result = super.call("cashBack", "cashBack():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cashBack(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cashBack", "cashBack():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  category(param0: Bytes): i32 {
    let result = super.call("category", "category(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toI32();
  }

  try_category(param0: Bytes): ethereum.CallResult<i32> {
    let result = super.tryCall("category", "category(bytes32):(uint8)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  creatorCut(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "creatorCut",
      "creatorCut(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_creatorCut(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creatorCut",
      "creatorCut(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delfyERC721(): Address {
    let result = super.call("delfyERC721", "delfyERC721():(address)", []);

    return result[0].toAddress();
  }

  try_delfyERC721(): ethereum.CallResult<Address> {
    let result = super.tryCall("delfyERC721", "delfyERC721():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAuction(param0: Bytes): ERC721Marketplace__getAuctionResult {
    let result = super.call(
      "getAuction",
      "getAuction(bytes32):(address,address,address,uint256,address,uint256,uint256,address,uint256,uint256,bytes32,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new ERC721Marketplace__getAuctionResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toAddress(),
      result[8].toBigInt(),
      result[9].toBigInt(),
      result[10].toBytes(),
      result[11].toI32(),
      result[12].toBigInt()
    );
  }

  try_getAuction(
    param0: Bytes
  ): ethereum.CallResult<ERC721Marketplace__getAuctionResult> {
    let result = super.tryCall(
      "getAuction",
      "getAuction(bytes32):(address,address,address,uint256,address,uint256,uint256,address,uint256,uint256,bytes32,uint8,uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Marketplace__getAuctionResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toAddress(),
        value[8].toBigInt(),
        value[9].toBigInt(),
        value[10].toBytes(),
        value[11].toI32(),
        value[12].toBigInt()
      )
    );
  }

  giveCashBack(): boolean {
    let result = super.call("giveCashBack", "giveCashBack():(bool)", []);

    return result[0].toBoolean();
  }

  try_giveCashBack(): ethereum.CallResult<boolean> {
    let result = super.tryCall("giveCashBack", "giveCashBack():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isMinter(param0: Address): boolean {
    let result = super.call("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isMinter(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isMinter", "isMinter(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPlatformToken(param0: Address): boolean {
    let result = super.call(
      "isPlatformToken",
      "isPlatformToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isPlatformToken(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPlatformToken",
      "isPlatformToken(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedERC721(param0: Address): boolean {
    let result = super.call(
      "isSupportedERC721",
      "isSupportedERC721(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_isSupportedERC721(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedERC721",
      "isSupportedERC721(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  platformCut(): BigInt {
    let result = super.call("platformCut", "platformCut():(uint256)", []);

    return result[0].toBigInt();
  }

  try_platformCut(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("platformCut", "platformCut():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformVault(): Address {
    let result = super.call("platformVault", "platformVault():(address)", []);

    return result[0].toAddress();
  }

  try_platformVault(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformVault",
      "platformVault():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  refBonus(): BigInt {
    let result = super.call("refBonus", "refBonus():(uint256)", []);

    return result[0].toBigInt();
  }

  try_refBonus(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("refBonus", "refBonus():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOwnerAuctions(_creator: Address): Array<Bytes> {
    let result = super.call(
      "getOwnerAuctions",
      "getOwnerAuctions(address):(bytes32[])",
      [ethereum.Value.fromAddress(_creator)]
    );

    return result[0].toBytesArray();
  }

  try_getOwnerAuctions(_creator: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getOwnerAuctions",
      "getOwnerAuctions(address):(bytes32[])",
      [ethereum.Value.fromAddress(_creator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getUserCollections(
    collector: Address
  ): Array<ERC721Marketplace__getUserCollectionsResultValue0Struct> {
    let result = super.call(
      "getUserCollections",
      "getUserCollections(address):((address,address,address,uint256,address,uint256,uint256,address,uint256,uint256,bytes32,uint8,uint256)[])",
      [ethereum.Value.fromAddress(collector)]
    );

    return result[0].toTupleArray<
      ERC721Marketplace__getUserCollectionsResultValue0Struct
    >();
  }

  try_getUserCollections(
    collector: Address
  ): ethereum.CallResult<
    Array<ERC721Marketplace__getUserCollectionsResultValue0Struct>
  > {
    let result = super.tryCall(
      "getUserCollections",
      "getUserCollections(address):((address,address,address,uint256,address,uint256,uint256,address,uint256,uint256,bytes32,uint8,uint256)[])",
      [ethereum.Value.fromAddress(collector)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        ERC721Marketplace__getUserCollectionsResultValue0Struct
      >()
    );
  }

  cancelAuction(_auctionId: Bytes): boolean {
    let result = super.call("cancelAuction", "cancelAuction(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(_auctionId)
    ]);

    return result[0].toBoolean();
  }

  try_cancelAuction(_auctionId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "cancelAuction",
      "cancelAuction(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateBasePrice(_auctionId: Bytes, _newBasePrice: BigInt): boolean {
    let result = super.call(
      "updateBasePrice",
      "updateBasePrice(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_newBasePrice)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateBasePrice(
    _auctionId: Bytes,
    _newBasePrice: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateBasePrice",
      "updateBasePrice(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_newBasePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateRoyaltyFees(_auctionId: Bytes, _newSecFees: BigInt): boolean {
    let result = super.call(
      "updateRoyaltyFees",
      "updateRoyaltyFees(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_newSecFees)
      ]
    );

    return result[0].toBoolean();
  }

  try_updateRoyaltyFees(
    _auctionId: Bytes,
    _newSecFees: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "updateRoyaltyFees",
      "updateRoyaltyFees(bytes32,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(_auctionId),
        ethereum.Value.fromUnsignedBigInt(_newSecFees)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getOwnerPayment(_auctionId: Bytes): BigInt {
    let result = super.call(
      "getOwnerPayment",
      "getOwnerPayment(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getOwnerPayment(_auctionId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOwnerPayment",
      "getOwnerPayment(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyaltyCut(_auctionId: Bytes): BigInt {
    let result = super.call(
      "getRoyaltyCut",
      "getRoyaltyCut(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );

    return result[0].toBigInt();
  }

  try_getRoyaltyCut(_auctionId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoyaltyCut",
      "getRoyaltyCut(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPlatformCut(_auctionId: Bytes): ERC721Marketplace__getPlatformCutResult {
    let result = super.call(
      "getPlatformCut",
      "getPlatformCut(bytes32):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );

    return new ERC721Marketplace__getPlatformCutResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getPlatformCut(
    _auctionId: Bytes
  ): ethereum.CallResult<ERC721Marketplace__getPlatformCutResult> {
    let result = super.tryCall(
      "getPlatformCut",
      "getPlatformCut(bytes32):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_auctionId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ERC721Marketplace__getPlatformCutResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSupportedTokens(): Array<Address> {
    let result = super.call(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getSupportedTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getSupportedTokens",
      "getSupportedTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAuctionIds(): Array<Bytes> {
    let result = super.call("getAuctionIds", "getAuctionIds():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_getAuctionIds(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAuctionIds",
      "getAuctionIds():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getOwnerTokenIds(owner: Address, _token: Address): Array<BigInt> {
    let result = super.call(
      "getOwnerTokenIds",
      "getOwnerTokenIds(address,address):(uint256[])",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigIntArray();
  }

  try_getOwnerTokenIds(
    owner: Address,
    _token: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOwnerTokenIds",
      "getOwnerTokenIds(address,address):(uint256[])",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get vault(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class CreateAuctionCall extends ethereum.Call {
  get inputs(): CreateAuctionCall__Inputs {
    return new CreateAuctionCall__Inputs(this);
  }

  get outputs(): CreateAuctionCall__Outputs {
    return new CreateAuctionCall__Outputs(this);
  }
}

export class CreateAuctionCall__Inputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _basePrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _secondaryFees(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _paymentMethod(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _category(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class CreateAuctionCall__Outputs {
  _call: CreateAuctionCall;

  constructor(call: CreateAuctionCall) {
    this._call = call;
  }
}

export class MakeBidCall extends ethereum.Call {
  get inputs(): MakeBidCall__Inputs {
    return new MakeBidCall__Inputs(this);
  }

  get outputs(): MakeBidCall__Outputs {
    return new MakeBidCall__Outputs(this);
  }
}

export class MakeBidCall__Inputs {
  _call: MakeBidCall;

  constructor(call: MakeBidCall) {
    this._call = call;
  }

  get _id(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get bidValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakeBidCall__Outputs {
  _call: MakeBidCall;

  constructor(call: MakeBidCall) {
    this._call = call;
  }
}

export class UpdatePaymentMethodCall extends ethereum.Call {
  get inputs(): UpdatePaymentMethodCall__Inputs {
    return new UpdatePaymentMethodCall__Inputs(this);
  }

  get outputs(): UpdatePaymentMethodCall__Outputs {
    return new UpdatePaymentMethodCall__Outputs(this);
  }
}

export class UpdatePaymentMethodCall__Inputs {
  _call: UpdatePaymentMethodCall;

  constructor(call: UpdatePaymentMethodCall) {
    this._call = call;
  }

  get auctionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newPaymentMtd(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdatePaymentMethodCall__Outputs {
  _call: UpdatePaymentMethodCall;

  constructor(call: UpdatePaymentMethodCall) {
    this._call = call;
  }
}

export class CancelAuctionCall extends ethereum.Call {
  get inputs(): CancelAuctionCall__Inputs {
    return new CancelAuctionCall__Inputs(this);
  }

  get outputs(): CancelAuctionCall__Outputs {
    return new CancelAuctionCall__Outputs(this);
  }
}

export class CancelAuctionCall__Inputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get _auctionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelAuctionCall__Outputs {
  _call: CancelAuctionCall;

  constructor(call: CancelAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CloseAuctionCall extends ethereum.Call {
  get inputs(): CloseAuctionCall__Inputs {
    return new CloseAuctionCall__Inputs(this);
  }

  get outputs(): CloseAuctionCall__Outputs {
    return new CloseAuctionCall__Outputs(this);
  }
}

export class CloseAuctionCall__Inputs {
  _call: CloseAuctionCall;

  constructor(call: CloseAuctionCall) {
    this._call = call;
  }

  get _auctionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CloseAuctionCall__Outputs {
  _call: CloseAuctionCall;

  constructor(call: CloseAuctionCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateBasePriceCall extends ethereum.Call {
  get inputs(): UpdateBasePriceCall__Inputs {
    return new UpdateBasePriceCall__Inputs(this);
  }

  get outputs(): UpdateBasePriceCall__Outputs {
    return new UpdateBasePriceCall__Outputs(this);
  }
}

export class UpdateBasePriceCall__Inputs {
  _call: UpdateBasePriceCall;

  constructor(call: UpdateBasePriceCall) {
    this._call = call;
  }

  get _auctionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _newBasePrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateBasePriceCall__Outputs {
  _call: UpdateBasePriceCall;

  constructor(call: UpdateBasePriceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateRoyaltyFeesCall extends ethereum.Call {
  get inputs(): UpdateRoyaltyFeesCall__Inputs {
    return new UpdateRoyaltyFeesCall__Inputs(this);
  }

  get outputs(): UpdateRoyaltyFeesCall__Outputs {
    return new UpdateRoyaltyFeesCall__Outputs(this);
  }
}

export class UpdateRoyaltyFeesCall__Inputs {
  _call: UpdateRoyaltyFeesCall;

  constructor(call: UpdateRoyaltyFeesCall) {
    this._call = call;
  }

  get _auctionId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _newSecFees(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateRoyaltyFeesCall__Outputs {
  _call: UpdateRoyaltyFeesCall;

  constructor(call: UpdateRoyaltyFeesCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UpdateCashbackRefBonusCall extends ethereum.Call {
  get inputs(): UpdateCashbackRefBonusCall__Inputs {
    return new UpdateCashbackRefBonusCall__Inputs(this);
  }

  get outputs(): UpdateCashbackRefBonusCall__Outputs {
    return new UpdateCashbackRefBonusCall__Outputs(this);
  }
}

export class UpdateCashbackRefBonusCall__Inputs {
  _call: UpdateCashbackRefBonusCall;

  constructor(call: UpdateCashbackRefBonusCall) {
    this._call = call;
  }

  get _cashBack(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _refBonus(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateCashbackRefBonusCall__Outputs {
  _call: UpdateCashbackRefBonusCall;

  constructor(call: UpdateCashbackRefBonusCall) {
    this._call = call;
  }
}

export class UpdateBidWindowCall extends ethereum.Call {
  get inputs(): UpdateBidWindowCall__Inputs {
    return new UpdateBidWindowCall__Inputs(this);
  }

  get outputs(): UpdateBidWindowCall__Outputs {
    return new UpdateBidWindowCall__Outputs(this);
  }
}

export class UpdateBidWindowCall__Inputs {
  _call: UpdateBidWindowCall;

  constructor(call: UpdateBidWindowCall) {
    this._call = call;
  }

  get _bidW(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateBidWindowCall__Outputs {
  _call: UpdateBidWindowCall;

  constructor(call: UpdateBidWindowCall) {
    this._call = call;
  }
}

export class TogglePauseCall extends ethereum.Call {
  get inputs(): TogglePauseCall__Inputs {
    return new TogglePauseCall__Inputs(this);
  }

  get outputs(): TogglePauseCall__Outputs {
    return new TogglePauseCall__Outputs(this);
  }
}

export class TogglePauseCall__Inputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class TogglePauseCall__Outputs {
  _call: TogglePauseCall;

  constructor(call: TogglePauseCall) {
    this._call = call;
  }
}

export class AddPlatformTokensCall extends ethereum.Call {
  get inputs(): AddPlatformTokensCall__Inputs {
    return new AddPlatformTokensCall__Inputs(this);
  }

  get outputs(): AddPlatformTokensCall__Outputs {
    return new AddPlatformTokensCall__Outputs(this);
  }
}

export class AddPlatformTokensCall__Inputs {
  _call: AddPlatformTokensCall;

  constructor(call: AddPlatformTokensCall) {
    this._call = call;
  }

  get _tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddPlatformTokensCall__Outputs {
  _call: AddPlatformTokensCall;

  constructor(call: AddPlatformTokensCall) {
    this._call = call;
  }
}

export class AddSupportedERC721Call extends ethereum.Call {
  get inputs(): AddSupportedERC721Call__Inputs {
    return new AddSupportedERC721Call__Inputs(this);
  }

  get outputs(): AddSupportedERC721Call__Outputs {
    return new AddSupportedERC721Call__Outputs(this);
  }
}

export class AddSupportedERC721Call__Inputs {
  _call: AddSupportedERC721Call;

  constructor(call: AddSupportedERC721Call) {
    this._call = call;
  }

  get ERC721Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSupportedERC721Call__Outputs {
  _call: AddSupportedERC721Call;

  constructor(call: AddSupportedERC721Call) {
    this._call = call;
  }
}

export class UpdatePlatformCutCall extends ethereum.Call {
  get inputs(): UpdatePlatformCutCall__Inputs {
    return new UpdatePlatformCutCall__Inputs(this);
  }

  get outputs(): UpdatePlatformCutCall__Outputs {
    return new UpdatePlatformCutCall__Outputs(this);
  }
}

export class UpdatePlatformCutCall__Inputs {
  _call: UpdatePlatformCutCall;

  constructor(call: UpdatePlatformCutCall) {
    this._call = call;
  }

  get newCut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdatePlatformCutCall__Outputs {
  _call: UpdatePlatformCutCall;

  constructor(call: UpdatePlatformCutCall) {
    this._call = call;
  }
}

export class AddDelfyERC721Call extends ethereum.Call {
  get inputs(): AddDelfyERC721Call__Inputs {
    return new AddDelfyERC721Call__Inputs(this);
  }

  get outputs(): AddDelfyERC721Call__Outputs {
    return new AddDelfyERC721Call__Outputs(this);
  }
}

export class AddDelfyERC721Call__Inputs {
  _call: AddDelfyERC721Call;

  constructor(call: AddDelfyERC721Call) {
    this._call = call;
  }

  get delfyERC721Token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddDelfyERC721Call__Outputs {
  _call: AddDelfyERC721Call;

  constructor(call: AddDelfyERC721Call) {
    this._call = call;
  }
}

export class UpdatePlatformVaultCall extends ethereum.Call {
  get inputs(): UpdatePlatformVaultCall__Inputs {
    return new UpdatePlatformVaultCall__Inputs(this);
  }

  get outputs(): UpdatePlatformVaultCall__Outputs {
    return new UpdatePlatformVaultCall__Outputs(this);
  }
}

export class UpdatePlatformVaultCall__Inputs {
  _call: UpdatePlatformVaultCall;

  constructor(call: UpdatePlatformVaultCall) {
    this._call = call;
  }

  get feesReceiver(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePlatformVaultCall__Outputs {
  _call: UpdatePlatformVaultCall;

  constructor(call: UpdatePlatformVaultCall) {
    this._call = call;
  }
}
